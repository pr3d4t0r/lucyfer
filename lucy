#!/bin/bash

# (c) Copyright 2022 by pr3d4t0r

# vim: set fileencoding=utf-8:

set -e


# +++ constants +++

LUCYFER_COMPOSE='lucyfer-compose.yaml'


# *** functions ***

die() {
    echo "$1"
    exit "$2"
} # die


assertActionInCLI() {
    [[ -z "$1" ]] && die "Command missing; syntax: lucy start | stop | status" 8

    case "$1" in
        "start")
            ;;
        "stop")
            ;;
        "status")
            ;;
        *)
            die "Syntax: lucy start | stop | status" 9
            ;;
    esac
} # assertActionInCLI


assertDockerServiceIsRunning() {
    local uname=$(uname)
    local message="Docker daemon not running"

    case "$uname" in
        "Darwin")
            [[ -n $(ps aux | awk '/Docker Desktop\.app/') ]] || die "$message" 4
            ;;
        "Linux")
            die "Linux not supported yet" 6
            ;;
        *)
            die "$uname not supported" 3
    esac
} # assertDockerServiceIsRunning


assertDockerIsAvailable() {
    which docker-compose > /dev/null || die "docker-compose unavailable or not in path" 1
} # assertDockerIsAvailable


assertDockerComposeFileExists() {
    [[ -e "$LUCYFER_COMPOSE" ]] || die "$LUCYFER_COMPOSE is not present in pwd == $(pwd)" 2
} # assertDockerComposeFileExists


assertWorkspaceExists() {
    if [[ -z "$LUCYFER_WORKSPACE" ]]
    then

cat <<EOF

The LUCYFER_WORKSPACE environment variable must point at the fully qualified
path to the working directory where the user intends to store Jupyter notebooks
and data.  This script links the Jupyter jovyan user $USER to LUCYFER_WORKSPACE
for storing state, data, and notebooks.

From the command line, do:

export LUCYFER_WORKSPACE=/path/to/workspace/dir

Where /path/to/workspace/dir is your workspace.

EOF

        export LUCYFER_WORKSPACE="$(pwd)"
        echo "LUCYFER_WORKSPACE=$LUCYFER_WORKSPACE"
    fi
} # assertWorkspaceExists


assertDataRepositoryExists() {
    if [[ -z "$BLAZEGRAPH_DATA" ]]
    then
cat << EOF

The BLAZEGRAPH_DATA environment variable must point at the fully qualified
path to the working directory where the user intends to store graph data files.
This script links /data in the Blazegraph container to BLAZEGRAPH_DATA for
storing database configuration and data.

From the command line, do:

export BLAZEGRAPH_DATA=/path/to/data/repository

Where /path/to/data/repository is the database work area.

EOF
        export BLAZEGRAPH_DATA="$(pwd)/data"
        echo "BLAZEGRAPH_DATA=$BLAZEGRAPH_DATA"
    fi

    mkdir -p "$BLAZEGRAPH_DATA"
} # assertDataRepositoryExists


setOwnership() {
    # Set ownership to the correct user:group to avoid conflicts
    # between the internal Docker container user names and the 
    # host's.
    #
    # This script resolves to the userID:groupID of the account
    # from whence it was invoked.
    #
    # Documented method because Docker permissions and ownership
    # kinda suck.
    export BLAZEGRAPH_GID=$(id -g)
    export BLAZEGRAPH_UID=$(id -u)
    export JUPYTER_LAB_GID=$(id -g)
    export JUPYTER_LAB_UID=$(id -u)
} # setOwnership


_snuffContainer() {
    [[ -n "$1" ]] || die "container name not specified in _snuffContainer()" 5

    local container=$(docker ps -a | awk -v "containerName=$1" '$0 ~ containerName { print($NF); }')

    if [[ -n "$container" ]]
    then
        docker rm -f "$container"
    fi
} # _snuffContainer


resolveImageByPlatform() {
   local platform=$(uname -a | awk 'BEGIN { m = "ARM64"; i = "X86"; } { if ($14 ~ m) print(m); if ($14 ~ i) print(i); }')

    case "$platform" in
        "ARM64")
            export LUCYFER_IMAGE="lucyfer-m"
            ;;
        "X86")
            export LUCYFER_IMAGE="lucyfer"
            ;;
        *)
            die "host platform not supported" 7
            ;;
    esac
} # resolveImageByPlatform


showJupyterDatascienceLab() {
    echo ""
    docker-compose -f "$LUCYFER_COMPOSE" ps -a
} # showJupyterDatascienceLab


runJupyterDatascienceLab() {
    _snuffContainer "lucyfer"
    _snuffContainer "kallisto"

    echo ""
    env | awk '/LUCYFER/ || /JUPYTER/ || /HOME/ || /BLAZE/' | sort
    docker-compose -f "$LUCYFER_COMPOSE" up --remove-orphans --no-recreate -d || docker-compose rm -f 
    # TODO: replace with an actual check to see if the container started/is healthy
    sleep 10
    # TODO:  delete this?
    # docker ps -a | awk 'NR == 1 { print; next; } /lucyfer/ || /kallisto/'
    showJupyterDatascienceLab
    docker logs lucyfer 2>&1 | awk -F "?" '/http:/ { gsub("token=", "Lucyfer access token = ", $NF); printf("\n%s\n", $NF); exit(0); }'
} # runJupyterDatascienceLab


killJupyterDatascienceLab() {
    echo ""
    env | awk '/LUCYFER/ || /JUPYTER/ || /HOME/ || /BLAZE/' | sort
    docker-compose -f "$LUCYFER_COMPOSE" stop
    showJupyterDatascienceLab
} # killJupyterDatascienceLab


displayEnvironment() {
    echo "export BLAZEGRAPH_DATA=$(pwd)/data"
} # displayEnvironment


# *** main ***

action="$1"
assertActionInCLI "$action"
assertDockerServiceIsRunning
assertDockerIsAvailable
assertDockerComposeFileExists
assertWorkspaceExists
assertDataRepositoryExists
setOwnership
resolveImageByPlatform

case "$action" in
    "start")
        runJupyterDatascienceLab
        ;;
    "status")
        showJupyterDatascienceLab
        ;;
    "stop")
        killJupyterDatascienceLab
        ;;
esac
echo ""

