#!/bin/bash

# (c) Copyright 2022 pr3d4t0r

# vim: set fileencoding=utf-8:

set -e


# +++ constants +++

KALLISTO_COMPOSE='kallisto-compose.yaml'


# *** functions ***

die() {
    echo "$1"
    exit "$2"
} # die


assertDockerServiceIsRunning() {
    local uname=$(uname)
    local message="Docker daemon not running"

    case "$uname" in
        "Darwin")
            [[ -n $(ps aux | awk '/Docker Desktop\.app/') ]] || die "$message" 4
            ;;
        "Linux")
            die "Linux not supported yet" 6
            ;;
        *)
            die "$uname not supported" 3
    esac
} # assertDockerServiceIsRunning


assertDockerIsAvailable() {
    which docker-compose > /dev/null || die "docker-compose unavailable or not in path" 1
} # assertDockerIsAvailable


assertDockerComposeFileExists() {
    [[ -e "$KALLISTO_COMPOSE" ]] || die "$KALLISTO_COMPOSE is not present in pwd == $(pwd)" 2
} # assertDockerComposeFileExists


assertDataRepositoryExists() {
    if [[ -z "$BLAZEGRAPH_DATA" ]]
    then
cat << EOF

The BLAZEGRAPH_DATA environment variable must point at the fully qualified
path to the working directory where the user intends to store graph data files.
This script links /data in the Blazegraph container to $BLAZEGRAPH_DATA for
storing database configuration and data.

From the command line, do:

export BLAZEGRAPH_DATA=/path/to/data/repository

Where /path/to/data/repository is the database work area.

EOF
        export BLAZEGRAPH_DATA="$(pwd)/data"
        echo "BLAZEGRAPH_DATA=$BLAZEGRAPH_DATA"
    fi

    mkdir -p "$BLAZEGRAPH_DATA"
} # assertDataRepositoryExists


setOwnership() {
    # Set ownership to the correct user:group to avoid conflicts
    # between the internal Docker container user names and the 
    # host's.
    #
    # This script resolves to the userID:groupID of the account
    # from whence it was invoked.
    #
    # Documented method because Docker permissions and ownership
    # kinda suck.
    export BLAZEGRAPH_GID=$(id -g)
    export BLAZEGRAPH_UID=$(id -u)
} # setOwnership


_snuffContainer() {
    [[ -n "$1" ]] || die "container name not specified in _snuffContainer()" 5

    local container=$(docker ps -a | awk -v "containerName=$1" '$0 ~ containerName { print($NF); }')

    if [[ -n "$container" ]]
    then
        docker rm -f "$container"
    fi
} # _snuffContainer


runJupyterScienceLab() {
    _snuffContainer "kallisto"

    echo ""
    env | awk '/JUPYTER/ || /HOME/ || /BLAZE/' | sort
    docker-compose -f "$KALLISTO_COMPOSE" up --remove-orphans --no-recreate -d || docker-compose rm -f 
    sleep 2 
    docker ps -a | awk 'NR == 1 { print; next; } /lucyfer/ || /kallisto/'
    docker logs lucyfer 2>&1 | awk -F "?" '/http:/ { gsub("token=", "Lucyfer access token = ", $NF); printf("\n%s\n", $NF); exit(0); }'
} # runJupyterScienceLab


# *** main ***

assertDockerServiceIsRunning
assertDockerIsAvailable
assertDockerComposeFileExists
assertDataRepositoryExists
setOwnership
runJupyterScienceLab

